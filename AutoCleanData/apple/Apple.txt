mathematics computer science apply function applies function arguments central programming languages derived lambda calculus lisp scheme also functional languages role study denotational semantics computer programs continuous function complete partial orders apply also continuous function homotopy theory indeed underpins entire theory allows homotopy deformation viewed continuous path space functions likewise valid mutations refactorings computer programs seen continuous scott topology general setting apply category theory right adjoint currying closed monoidal categories special case cartesian closed categories whose internal language simply typed lambda calculus programming computer programming apply applies function list arguments eval apply two interdependent components cycle essence evaluating lisp described sicp function application corresponds beta reduction lambda calculus apply function apply also name special function many languages takes function list uses list function argument list function called elements list arguments important languages variadic functions way call function indeterminate compile time number arguments common lisp scheme common lisp apply function applies function list arguments note variadic function takes number arguments similarly scheme bind used either via std namespace via boost namespace c java c java variadic arguments simply collected array caller explicitly pass array place variadic arguments done variadic parameter possible apply array arguments parameter without using reflection ambiguous case arises caller want pass array one arguments rather using array list arguments case caller cast array object prevent compiler using apply interpretation version 8 lambda expressions introduced functions implemented objects functional interface interface one method standard interface consist method plus static utility functions go go typed variadic arguments simply collected slice caller explicitly pass slice place variadic arguments appending slice argument done variadic parameter caller apply array arguments parameters without using reflection haskell haskell functions may applied simple juxtaposition haskell syntax may also interpreted parameter curries function turn example func param1 returns another function accepting one fewer parameters applied param2 function parameters javascript javascript function objects apply method first argument value keyword inside function second list arguments es6 adds spread operator func args may used instead apply lua lua apply written way perl perl arrays hashes expressions automatically flattened single list evaluated list context argument list function php php apply called python ruby python ruby asterisk notation used defining variadic functions used calling function sequence array respectively python originally apply function deprecated favour asterisk removed r r constructs executes function call name function list arguments passed smalltalk smalltalk block function objects valuewitharguments method takes array arguments tcl since tcl function applied arguments apply command function two element list args body three element list args body namespace universal property consider function g x × → z g z g ∈ x × → z z bracket notation → b b denotes space functions means currying unique function curry g x → → z curry g z apply provides universal morphism apply → z × → z apply z z apply f f apply f equivalently one commuting diagram apply ∘ curry g × id g apply curry g id precisely curry apply adjoint functors notation → b b space functions b occurs commonly computer science category theory however → b b known exponential object written b common notational differences well example apply often called eval even though computer science thing eval distinguished apply evaluation quoted string form function arguments rather application function arguments also category theory curry commonly denoted λ λ g g written curry g notation conflict use λ lambda calculus lambda used denote bound variables notational changes accounted adjointness apply curry expressed commuting diagram articles exponential object cartesian closed category provide precise discussion formulation idea thus use lambda accidental internal language cartesian closed categories lambda calculus general possible setting apply closed monoidal categories cartesian closed categories example homological algebra adjointness curry apply known adjunction topological properties order theory category complete partial orders endowed scott topology curry apply continuous functions scott continuous property helps establish foundational validity study denotational semantics computer programs algebraic geometry homotopy theory curry apply continuous functions space x x continuous functions x x given compact open topology x x locally compact hausdorff result important underpins homotopy theory allowing homotopic deformations understood continuous paths space functions references